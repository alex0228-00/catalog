// Code generated by ent, DO NOT EDIT.

package ent

import (
	"catalog/src/datastore/ent/system"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemCreate is the builder for creating a System entity.
type SystemCreate struct {
	config
	mutation *SystemMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (sc *SystemCreate) SetType(s string) *SystemCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetHost sets the "host" field.
func (sc *SystemCreate) SetHost(s string) *SystemCreate {
	sc.mutation.SetHost(s)
	return sc
}

// SetUniqueIdentifier sets the "unique_identifier" field.
func (sc *SystemCreate) SetUniqueIdentifier(s string) *SystemCreate {
	sc.mutation.SetUniqueIdentifier(s)
	return sc
}

// SetCredentials sets the "credentials" field.
func (sc *SystemCreate) SetCredentials(s string) *SystemCreate {
	sc.mutation.SetCredentials(s)
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SystemCreate) SetCreatedBy(s string) *SystemCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SystemCreate) SetCreatedAt(t time.Time) *SystemCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SystemCreate) SetNillableCreatedAt(t *time.Time) *SystemCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SystemCreate) SetUpdatedBy(s string) *SystemCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SystemCreate) SetUpdatedAt(t time.Time) *SystemCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SystemCreate) SetNillableUpdatedAt(t *time.Time) *SystemCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedBy sets the "deleted_by" field.
func (sc *SystemCreate) SetDeletedBy(s string) *SystemCreate {
	sc.mutation.SetDeletedBy(s)
	return sc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sc *SystemCreate) SetNillableDeletedBy(s *string) *SystemCreate {
	if s != nil {
		sc.SetDeletedBy(*s)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SystemCreate) SetDeletedAt(t time.Time) *SystemCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SystemCreate) SetNillableDeletedAt(t *time.Time) *SystemCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SystemCreate) SetID(s string) *SystemCreate {
	sc.mutation.SetID(s)
	return sc
}

// Mutation returns the SystemMutation object of the builder.
func (sc *SystemCreate) Mutation() *SystemMutation {
	return sc.mutation
}

// Save creates the System in the database.
func (sc *SystemCreate) Save(ctx context.Context) (*System, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SystemCreate) SaveX(ctx context.Context) *System {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SystemCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SystemCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SystemCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := system.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := system.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SystemCreate) check() error {
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "System.type"`)}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := system.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "System.type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Host(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required field "System.host"`)}
	}
	if v, ok := sc.mutation.Host(); ok {
		if err := system.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "System.host": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UniqueIdentifier(); !ok {
		return &ValidationError{Name: "unique_identifier", err: errors.New(`ent: missing required field "System.unique_identifier"`)}
	}
	if _, ok := sc.mutation.Credentials(); !ok {
		return &ValidationError{Name: "credentials", err: errors.New(`ent: missing required field "System.credentials"`)}
	}
	if v, ok := sc.mutation.Credentials(); ok {
		if err := system.CredentialsValidator(v); err != nil {
			return &ValidationError{Name: "credentials", err: fmt.Errorf(`ent: validator failed for field "System.credentials": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "System.created_by"`)}
	}
	if v, ok := sc.mutation.CreatedBy(); ok {
		if err := system.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "System.created_by": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "System.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "System.updated_by"`)}
	}
	if v, ok := sc.mutation.UpdatedBy(); ok {
		if err := system.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "System.updated_by": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "System.updated_at"`)}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := system.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "System.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SystemCreate) sqlSave(ctx context.Context) (*System, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected System.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SystemCreate) createSpec() (*System, *sqlgraph.CreateSpec) {
	var (
		_node = &System{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(system.Table, sqlgraph.NewFieldSpec(system.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(system.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Host(); ok {
		_spec.SetField(system.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := sc.mutation.UniqueIdentifier(); ok {
		_spec.SetField(system.FieldUniqueIdentifier, field.TypeString, value)
		_node.UniqueIdentifier = value
	}
	if value, ok := sc.mutation.Credentials(); ok {
		_spec.SetField(system.FieldCredentials, field.TypeString, value)
		_node.Credentials = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(system.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(system.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(system.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(system.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedBy(); ok {
		_spec.SetField(system.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(system.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// SystemCreateBulk is the builder for creating many System entities in bulk.
type SystemCreateBulk struct {
	config
	err      error
	builders []*SystemCreate
}

// Save creates the System entities in the database.
func (scb *SystemCreateBulk) Save(ctx context.Context) ([]*System, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*System, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SystemCreateBulk) SaveX(ctx context.Context) []*System {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SystemCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SystemCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
