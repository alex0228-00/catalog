// Code generated by ent, DO NOT EDIT.

package system

import (
	"catalog/src/datastore/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.System {
	return predicate.System(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.System {
	return predicate.System(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldType, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldHost, v))
}

// UniqueIdentifier applies equality check predicate on the "unique_identifier" field. It's identical to UniqueIdentifierEQ.
func UniqueIdentifier(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldUniqueIdentifier, v))
}

// Credentials applies equality check predicate on the "credentials" field. It's identical to CredentialsEQ.
func Credentials(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldCredentials, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldDeletedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.System {
	return predicate.System(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.System {
	return predicate.System(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.System {
	return predicate.System(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.System {
	return predicate.System(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.System {
	return predicate.System(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldType, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.System {
	return predicate.System(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.System {
	return predicate.System(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.System {
	return predicate.System(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.System {
	return predicate.System(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.System {
	return predicate.System(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldHost, v))
}

// UniqueIdentifierEQ applies the EQ predicate on the "unique_identifier" field.
func UniqueIdentifierEQ(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldUniqueIdentifier, v))
}

// UniqueIdentifierNEQ applies the NEQ predicate on the "unique_identifier" field.
func UniqueIdentifierNEQ(v string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldUniqueIdentifier, v))
}

// UniqueIdentifierIn applies the In predicate on the "unique_identifier" field.
func UniqueIdentifierIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldUniqueIdentifier, vs...))
}

// UniqueIdentifierNotIn applies the NotIn predicate on the "unique_identifier" field.
func UniqueIdentifierNotIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldUniqueIdentifier, vs...))
}

// UniqueIdentifierGT applies the GT predicate on the "unique_identifier" field.
func UniqueIdentifierGT(v string) predicate.System {
	return predicate.System(sql.FieldGT(FieldUniqueIdentifier, v))
}

// UniqueIdentifierGTE applies the GTE predicate on the "unique_identifier" field.
func UniqueIdentifierGTE(v string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldUniqueIdentifier, v))
}

// UniqueIdentifierLT applies the LT predicate on the "unique_identifier" field.
func UniqueIdentifierLT(v string) predicate.System {
	return predicate.System(sql.FieldLT(FieldUniqueIdentifier, v))
}

// UniqueIdentifierLTE applies the LTE predicate on the "unique_identifier" field.
func UniqueIdentifierLTE(v string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldUniqueIdentifier, v))
}

// UniqueIdentifierContains applies the Contains predicate on the "unique_identifier" field.
func UniqueIdentifierContains(v string) predicate.System {
	return predicate.System(sql.FieldContains(FieldUniqueIdentifier, v))
}

// UniqueIdentifierHasPrefix applies the HasPrefix predicate on the "unique_identifier" field.
func UniqueIdentifierHasPrefix(v string) predicate.System {
	return predicate.System(sql.FieldHasPrefix(FieldUniqueIdentifier, v))
}

// UniqueIdentifierHasSuffix applies the HasSuffix predicate on the "unique_identifier" field.
func UniqueIdentifierHasSuffix(v string) predicate.System {
	return predicate.System(sql.FieldHasSuffix(FieldUniqueIdentifier, v))
}

// UniqueIdentifierEqualFold applies the EqualFold predicate on the "unique_identifier" field.
func UniqueIdentifierEqualFold(v string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldUniqueIdentifier, v))
}

// UniqueIdentifierContainsFold applies the ContainsFold predicate on the "unique_identifier" field.
func UniqueIdentifierContainsFold(v string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldUniqueIdentifier, v))
}

// CredentialsEQ applies the EQ predicate on the "credentials" field.
func CredentialsEQ(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldCredentials, v))
}

// CredentialsNEQ applies the NEQ predicate on the "credentials" field.
func CredentialsNEQ(v string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldCredentials, v))
}

// CredentialsIn applies the In predicate on the "credentials" field.
func CredentialsIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldCredentials, vs...))
}

// CredentialsNotIn applies the NotIn predicate on the "credentials" field.
func CredentialsNotIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldCredentials, vs...))
}

// CredentialsGT applies the GT predicate on the "credentials" field.
func CredentialsGT(v string) predicate.System {
	return predicate.System(sql.FieldGT(FieldCredentials, v))
}

// CredentialsGTE applies the GTE predicate on the "credentials" field.
func CredentialsGTE(v string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldCredentials, v))
}

// CredentialsLT applies the LT predicate on the "credentials" field.
func CredentialsLT(v string) predicate.System {
	return predicate.System(sql.FieldLT(FieldCredentials, v))
}

// CredentialsLTE applies the LTE predicate on the "credentials" field.
func CredentialsLTE(v string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldCredentials, v))
}

// CredentialsContains applies the Contains predicate on the "credentials" field.
func CredentialsContains(v string) predicate.System {
	return predicate.System(sql.FieldContains(FieldCredentials, v))
}

// CredentialsHasPrefix applies the HasPrefix predicate on the "credentials" field.
func CredentialsHasPrefix(v string) predicate.System {
	return predicate.System(sql.FieldHasPrefix(FieldCredentials, v))
}

// CredentialsHasSuffix applies the HasSuffix predicate on the "credentials" field.
func CredentialsHasSuffix(v string) predicate.System {
	return predicate.System(sql.FieldHasSuffix(FieldCredentials, v))
}

// CredentialsEqualFold applies the EqualFold predicate on the "credentials" field.
func CredentialsEqualFold(v string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldCredentials, v))
}

// CredentialsContainsFold applies the ContainsFold predicate on the "credentials" field.
func CredentialsContainsFold(v string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldCredentials, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.System {
	return predicate.System(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.System {
	return predicate.System(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.System {
	return predicate.System(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.System {
	return predicate.System(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.System {
	return predicate.System(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.System {
	return predicate.System(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.System {
	return predicate.System(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.System {
	return predicate.System(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.System {
	return predicate.System(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.System {
	return predicate.System(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.System {
	return predicate.System(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.System {
	return predicate.System(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.System {
	return predicate.System(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.System {
	return predicate.System(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.System {
	return predicate.System(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.System {
	return predicate.System(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.System {
	return predicate.System(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.System {
	return predicate.System(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.System {
	return predicate.System(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.System {
	return predicate.System(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.System {
	return predicate.System(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldDeletedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.System {
	return predicate.System(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.System {
	return predicate.System(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.System {
	return predicate.System(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.System {
	return predicate.System(sql.FieldNotNull(FieldDeletedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.System) predicate.System {
	return predicate.System(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.System) predicate.System {
	return predicate.System(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.System) predicate.System {
	return predicate.System(sql.NotPredicates(p))
}
