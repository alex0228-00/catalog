// Code generated by MockGen. DO NOT EDIT.
// Source: cred.go
//
// Generated by this command:
//
//	mockgen -source=cred.go -destination=mock_cred.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCredential is a mock of Credential interface.
type MockCredential struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialMockRecorder
	isgomock struct{}
}

// MockCredentialMockRecorder is the mock recorder for MockCredential.
type MockCredentialMockRecorder struct {
	mock *MockCredential
}

// NewMockCredential creates a new mock instance.
func NewMockCredential(ctrl *gomock.Controller) *MockCredential {
	mock := &MockCredential{ctrl: ctrl}
	mock.recorder = &MockCredentialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredential) EXPECT() *MockCredentialMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockCredential) Decode(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockCredentialMockRecorder) Decode(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCredential)(nil).Decode), data)
}

// Encode mocks base method.
func (m *MockCredential) Encode() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockCredentialMockRecorder) Encode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCredential)(nil).Encode))
}

// Type mocks base method.
func (m *MockCredential) Type() CredentialType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(CredentialType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockCredentialMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCredential)(nil).Type))
}
